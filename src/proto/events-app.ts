// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.3
//   protoc               v5.28.2
// source: src/proto/events-app.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "../../google/protobuf/empty";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "eventsms";

export interface HealthCheckRequest {
}

export interface HealthCheckResponse {
  healthy: boolean;
}

export interface GetArtistByIdRequest {
  id: string;
}

export interface UpdateArtistRequest {
  id: string;
  name: string;
  bio: string;
  genres: string[];
  availability: boolean;
  socialLinks: string[];
  user: string;
}

export interface DeleteArtistRequest {
  id: string;
}

export interface CreateArtistRequest {
  name: string;
  bio: string;
  genres: string[];
  availability: boolean;
  socialLinks: string[];
  user: string;
}

export interface ArtistResponse {
  id: string;
  name: string;
  bio: string;
  genres: string[];
  availability: boolean;
  socialLinks: string[];
  user: string;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export interface ArtistListResponse {
  artists: ArtistResponse[];
}

export interface CreateClubRequest {
  name: string;
  location: string;
  capacity: number;
  description: string;
  googleMapsLink: string;
}

export interface GetClubByIdRequest {
  id: string;
}

export interface UpdateClubRequest {
  id: string;
  name: string;
  location: string;
  capacity: number;
  description: string;
  googleMapsLink: string;
}

export interface DeleteClubRequest {
  id: string;
}

export interface ClubResponse {
  id: string;
  name: string;
  location: string;
  capacity: number;
  description: string;
  googleMapsLink: string;
  /** IDs of associated events */
  events: string[];
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export interface ClubListResponse {
  clubs: ClubResponse[];
}

export interface CreateEventRequest {
  name: string;
  location: string;
  dateStart: string;
  dateEnd: string;
  artist: string[];
  organizer: string;
  ticketPrice: number;
  club: string;
}

export interface GetEventByIdRequest {
  id: string;
}

export interface UpdateEventRequest {
  id: string;
  name: string;
  location: string;
  dateStart: string;
  dateEnd: string;
  artist: string[];
  organizer: string;
  ticketPrice: number;
  club: string;
}

export interface DeleteEventRequest {
  id: string;
}

export interface EventResponse {
  id: string;
  name: string;
  location: string;
  dateStart: string;
  dateEnd: string;
  artist: string[];
  organizer: string;
  ticketPrice: number;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
  club: string;
}

export interface EventListResponse {
  events: EventResponse[];
}

export interface CreateBookingRequest {
  /** Event ID */
  event: string;
  /** Artist ID */
  artist: string;
  /** Client ID */
  client: string;
  bookingDate: string;
  status: string;
}

export interface GetBookingByIdRequest {
  id: string;
}

export interface UpdateBookingRequest {
  id: string;
  event: string;
  artist: string;
  client: string;
  bookingDate: string;
  status: string;
}

export interface DeleteBookingRequest {
  id: string;
}

export interface BookingResponse {
  id: string;
  event: string;
  artist: string;
  client: string;
  bookingDate: string;
  status: string;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export interface BookingListResponse {
  bookings: BookingResponse[];
}

export interface CreateOrganizerRequest {
  /** Unique identifier of the user */
  userId: string;
  /** Organizer-specific email contact */
  contactEmail: string;
  /** Organizer-specific phone contact */
  contactPhone: string;
  /** Optional description for the organizer */
  description: string;
}

export interface GetOrganizerByIdRequest {
  id: string;
}

export interface UpdateOrganizerRequest {
  id: string;
  contactEmail: string;
  contactPhone: string;
  description: string;
}

export interface DeleteOrganizerRequest {
  id: string;
}

export interface OrganizerResponse {
  id: string;
  userId: string;
  contactEmail: string;
  contactPhone: string;
  description: string;
}

export interface OrganizerListResponse {
  organizers: OrganizerResponse[];
}

export const EVENTSMS_PACKAGE_NAME = "eventsms";

/** ------------------- MAIN APP SERVICE */

export interface HealthCheckClient {
  check(request: HealthCheckRequest, metadata?: Metadata): Observable<HealthCheckResponse>;
}

/** ------------------- MAIN APP SERVICE */

export interface HealthCheckController {
  check(
    request: HealthCheckRequest,
    metadata?: Metadata,
  ): Promise<HealthCheckResponse> | Observable<HealthCheckResponse> | HealthCheckResponse;
}

export function HealthCheckControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["check"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("HealthCheck", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("HealthCheck", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const HEALTH_CHECK_SERVICE_NAME = "HealthCheck";

/** ------------------- ARTISTS SERVICE */

export interface ArtistServiceClient {
  getArtistById(request: GetArtistByIdRequest, metadata?: Metadata): Observable<ArtistResponse>;

  updateArtist(request: UpdateArtistRequest, metadata?: Metadata): Observable<ArtistResponse>;

  deleteArtist(request: DeleteArtistRequest, metadata?: Metadata): Observable<ArtistResponse>;

  createArtist(request: CreateArtistRequest, metadata?: Metadata): Observable<ArtistResponse>;

  getAllArtists(request: Empty, metadata?: Metadata): Observable<ArtistListResponse>;
}

/** ------------------- ARTISTS SERVICE */

export interface ArtistServiceController {
  getArtistById(
    request: GetArtistByIdRequest,
    metadata?: Metadata,
  ): Promise<ArtistResponse> | Observable<ArtistResponse> | ArtistResponse;

  updateArtist(
    request: UpdateArtistRequest,
    metadata?: Metadata,
  ): Promise<ArtistResponse> | Observable<ArtistResponse> | ArtistResponse;

  deleteArtist(
    request: DeleteArtistRequest,
    metadata?: Metadata,
  ): Promise<ArtistResponse> | Observable<ArtistResponse> | ArtistResponse;

  createArtist(
    request: CreateArtistRequest,
    metadata?: Metadata,
  ): Promise<ArtistResponse> | Observable<ArtistResponse> | ArtistResponse;

  getAllArtists(
    request: Empty,
    metadata?: Metadata,
  ): Promise<ArtistListResponse> | Observable<ArtistListResponse> | ArtistListResponse;
}

export function ArtistServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getArtistById", "updateArtist", "deleteArtist", "createArtist", "getAllArtists"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ArtistService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ArtistService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ARTIST_SERVICE_NAME = "ArtistService";

/** ------------------- CLUBS SERVICE */

export interface ClubServiceClient {
  createClub(request: CreateClubRequest, metadata?: Metadata): Observable<ClubResponse>;

  getClubById(request: GetClubByIdRequest, metadata?: Metadata): Observable<ClubResponse>;

  updateClub(request: UpdateClubRequest, metadata?: Metadata): Observable<ClubResponse>;

  deleteClub(request: DeleteClubRequest, metadata?: Metadata): Observable<ClubResponse>;

  getAllClubs(request: Empty, metadata?: Metadata): Observable<ClubListResponse>;
}

/** ------------------- CLUBS SERVICE */

export interface ClubServiceController {
  createClub(
    request: CreateClubRequest,
    metadata?: Metadata,
  ): Promise<ClubResponse> | Observable<ClubResponse> | ClubResponse;

  getClubById(
    request: GetClubByIdRequest,
    metadata?: Metadata,
  ): Promise<ClubResponse> | Observable<ClubResponse> | ClubResponse;

  updateClub(
    request: UpdateClubRequest,
    metadata?: Metadata,
  ): Promise<ClubResponse> | Observable<ClubResponse> | ClubResponse;

  deleteClub(
    request: DeleteClubRequest,
    metadata?: Metadata,
  ): Promise<ClubResponse> | Observable<ClubResponse> | ClubResponse;

  getAllClubs(
    request: Empty,
    metadata?: Metadata,
  ): Promise<ClubListResponse> | Observable<ClubListResponse> | ClubListResponse;
}

export function ClubServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createClub", "getClubById", "updateClub", "deleteClub", "getAllClubs"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ClubService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ClubService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CLUB_SERVICE_NAME = "ClubService";

/** ------------------- EVENT SERVICE */

export interface EventServiceClient {
  createEvent(request: CreateEventRequest, metadata?: Metadata): Observable<EventResponse>;

  getEventById(request: GetEventByIdRequest, metadata?: Metadata): Observable<EventResponse>;

  updateEvent(request: UpdateEventRequest, metadata?: Metadata): Observable<EventResponse>;

  deleteEvent(request: DeleteEventRequest, metadata?: Metadata): Observable<EventResponse>;

  getAllEvents(request: Empty, metadata?: Metadata): Observable<EventListResponse>;
}

/** ------------------- EVENT SERVICE */

export interface EventServiceController {
  createEvent(
    request: CreateEventRequest,
    metadata?: Metadata,
  ): Promise<EventResponse> | Observable<EventResponse> | EventResponse;

  getEventById(
    request: GetEventByIdRequest,
    metadata?: Metadata,
  ): Promise<EventResponse> | Observable<EventResponse> | EventResponse;

  updateEvent(
    request: UpdateEventRequest,
    metadata?: Metadata,
  ): Promise<EventResponse> | Observable<EventResponse> | EventResponse;

  deleteEvent(
    request: DeleteEventRequest,
    metadata?: Metadata,
  ): Promise<EventResponse> | Observable<EventResponse> | EventResponse;

  getAllEvents(
    request: Empty,
    metadata?: Metadata,
  ): Promise<EventListResponse> | Observable<EventListResponse> | EventListResponse;
}

export function EventServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createEvent", "getEventById", "updateEvent", "deleteEvent", "getAllEvents"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("EventService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("EventService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const EVENT_SERVICE_NAME = "EventService";

/** ------------------- BOOKING SERVICE */

export interface BookingServiceClient {
  createBooking(request: CreateBookingRequest, metadata?: Metadata): Observable<BookingResponse>;

  getBookingById(request: GetBookingByIdRequest, metadata?: Metadata): Observable<BookingResponse>;

  updateBooking(request: UpdateBookingRequest, metadata?: Metadata): Observable<BookingResponse>;

  deleteBooking(request: DeleteBookingRequest, metadata?: Metadata): Observable<BookingResponse>;

  getAllBookings(request: Empty, metadata?: Metadata): Observable<BookingListResponse>;
}

/** ------------------- BOOKING SERVICE */

export interface BookingServiceController {
  createBooking(
    request: CreateBookingRequest,
    metadata?: Metadata,
  ): Promise<BookingResponse> | Observable<BookingResponse> | BookingResponse;

  getBookingById(
    request: GetBookingByIdRequest,
    metadata?: Metadata,
  ): Promise<BookingResponse> | Observable<BookingResponse> | BookingResponse;

  updateBooking(
    request: UpdateBookingRequest,
    metadata?: Metadata,
  ): Promise<BookingResponse> | Observable<BookingResponse> | BookingResponse;

  deleteBooking(
    request: DeleteBookingRequest,
    metadata?: Metadata,
  ): Promise<BookingResponse> | Observable<BookingResponse> | BookingResponse;

  getAllBookings(
    request: Empty,
    metadata?: Metadata,
  ): Promise<BookingListResponse> | Observable<BookingListResponse> | BookingListResponse;
}

export function BookingServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createBooking",
      "getBookingById",
      "updateBooking",
      "deleteBooking",
      "getAllBookings",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("BookingService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("BookingService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const BOOKING_SERVICE_NAME = "BookingService";

/** ------------------- ORGANIZER SERVICE */

export interface OrganizerServiceClient {
  createOrganizer(request: CreateOrganizerRequest, metadata?: Metadata): Observable<OrganizerResponse>;

  getOrganizerById(request: GetOrganizerByIdRequest, metadata?: Metadata): Observable<OrganizerResponse>;

  updateOrganizer(request: UpdateOrganizerRequest, metadata?: Metadata): Observable<OrganizerResponse>;

  deleteOrganizer(request: DeleteOrganizerRequest, metadata?: Metadata): Observable<Empty>;

  getAllOrganizers(request: Empty, metadata?: Metadata): Observable<OrganizerListResponse>;
}

/** ------------------- ORGANIZER SERVICE */

export interface OrganizerServiceController {
  createOrganizer(
    request: CreateOrganizerRequest,
    metadata?: Metadata,
  ): Promise<OrganizerResponse> | Observable<OrganizerResponse> | OrganizerResponse;

  getOrganizerById(
    request: GetOrganizerByIdRequest,
    metadata?: Metadata,
  ): Promise<OrganizerResponse> | Observable<OrganizerResponse> | OrganizerResponse;

  updateOrganizer(
    request: UpdateOrganizerRequest,
    metadata?: Metadata,
  ): Promise<OrganizerResponse> | Observable<OrganizerResponse> | OrganizerResponse;

  deleteOrganizer(request: DeleteOrganizerRequest, metadata?: Metadata): void;

  getAllOrganizers(
    request: Empty,
    metadata?: Metadata,
  ): Promise<OrganizerListResponse> | Observable<OrganizerListResponse> | OrganizerListResponse;
}

export function OrganizerServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createOrganizer",
      "getOrganizerById",
      "updateOrganizer",
      "deleteOrganizer",
      "getAllOrganizers",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("OrganizerService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("OrganizerService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ORGANIZER_SERVICE_NAME = "OrganizerService";

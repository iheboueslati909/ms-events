// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.3
//   protoc               v5.28.2
// source: src/proto/artist.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Empty } from "../../google/protobuf/empty";

export const protobufPackage = "artist";

export interface GetArtistByIdRequest {
  id: string;
}

export interface UpdateArtistRequest {
  id: string;
  name: string;
  bio: string;
  genres: string[];
  availability: boolean;
  socialLinks: string[];
  user: string;
}

export interface DeleteArtistRequest {
  id: string;
}

export interface CreateArtistRequest {
  name: string;
  bio: string;
  genres: string[];
  availability: boolean;
  socialLinks: string[];
  user: string;
}

export interface ArtistResponse {
  id: string;
  name: string;
  bio: string;
  genres: string[];
  availability: boolean;
  socialLinks: string[];
  user: string;
  createdAt: string;
  updatedAt: string;
}

export interface ArtistListResponse {
  artists: ArtistResponse[];
}

function createBaseGetArtistByIdRequest(): GetArtistByIdRequest {
  return { id: "" };
}

export const GetArtistByIdRequest: MessageFns<GetArtistByIdRequest> = {
  encode(message: GetArtistByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetArtistByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetArtistByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetArtistByIdRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetArtistByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetArtistByIdRequest>, I>>(base?: I): GetArtistByIdRequest {
    return GetArtistByIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetArtistByIdRequest>, I>>(object: I): GetArtistByIdRequest {
    const message = createBaseGetArtistByIdRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateArtistRequest(): UpdateArtistRequest {
  return { id: "", name: "", bio: "", genres: [], availability: false, socialLinks: [], user: "" };
}

export const UpdateArtistRequest: MessageFns<UpdateArtistRequest> = {
  encode(message: UpdateArtistRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.bio !== "") {
      writer.uint32(26).string(message.bio);
    }
    for (const v of message.genres) {
      writer.uint32(34).string(v!);
    }
    if (message.availability !== false) {
      writer.uint32(40).bool(message.availability);
    }
    for (const v of message.socialLinks) {
      writer.uint32(50).string(v!);
    }
    if (message.user !== "") {
      writer.uint32(58).string(message.user);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateArtistRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateArtistRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.bio = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.genres.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.availability = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.socialLinks.push(reader.string());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.user = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateArtistRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      bio: isSet(object.bio) ? globalThis.String(object.bio) : "",
      genres: globalThis.Array.isArray(object?.genres) ? object.genres.map((e: any) => globalThis.String(e)) : [],
      availability: isSet(object.availability) ? globalThis.Boolean(object.availability) : false,
      socialLinks: globalThis.Array.isArray(object?.socialLinks)
        ? object.socialLinks.map((e: any) => globalThis.String(e))
        : [],
      user: isSet(object.user) ? globalThis.String(object.user) : "",
    };
  },

  toJSON(message: UpdateArtistRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.bio !== "") {
      obj.bio = message.bio;
    }
    if (message.genres?.length) {
      obj.genres = message.genres;
    }
    if (message.availability !== false) {
      obj.availability = message.availability;
    }
    if (message.socialLinks?.length) {
      obj.socialLinks = message.socialLinks;
    }
    if (message.user !== "") {
      obj.user = message.user;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateArtistRequest>, I>>(base?: I): UpdateArtistRequest {
    return UpdateArtistRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateArtistRequest>, I>>(object: I): UpdateArtistRequest {
    const message = createBaseUpdateArtistRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.bio = object.bio ?? "";
    message.genres = object.genres?.map((e) => e) || [];
    message.availability = object.availability ?? false;
    message.socialLinks = object.socialLinks?.map((e) => e) || [];
    message.user = object.user ?? "";
    return message;
  },
};

function createBaseDeleteArtistRequest(): DeleteArtistRequest {
  return { id: "" };
}

export const DeleteArtistRequest: MessageFns<DeleteArtistRequest> = {
  encode(message: DeleteArtistRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteArtistRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteArtistRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteArtistRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: DeleteArtistRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteArtistRequest>, I>>(base?: I): DeleteArtistRequest {
    return DeleteArtistRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteArtistRequest>, I>>(object: I): DeleteArtistRequest {
    const message = createBaseDeleteArtistRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseCreateArtistRequest(): CreateArtistRequest {
  return { name: "", bio: "", genres: [], availability: false, socialLinks: [], user: "" };
}

export const CreateArtistRequest: MessageFns<CreateArtistRequest> = {
  encode(message: CreateArtistRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.bio !== "") {
      writer.uint32(18).string(message.bio);
    }
    for (const v of message.genres) {
      writer.uint32(26).string(v!);
    }
    if (message.availability !== false) {
      writer.uint32(32).bool(message.availability);
    }
    for (const v of message.socialLinks) {
      writer.uint32(42).string(v!);
    }
    if (message.user !== "") {
      writer.uint32(50).string(message.user);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateArtistRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateArtistRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.bio = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.genres.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.availability = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.socialLinks.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.user = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateArtistRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      bio: isSet(object.bio) ? globalThis.String(object.bio) : "",
      genres: globalThis.Array.isArray(object?.genres) ? object.genres.map((e: any) => globalThis.String(e)) : [],
      availability: isSet(object.availability) ? globalThis.Boolean(object.availability) : false,
      socialLinks: globalThis.Array.isArray(object?.socialLinks)
        ? object.socialLinks.map((e: any) => globalThis.String(e))
        : [],
      user: isSet(object.user) ? globalThis.String(object.user) : "",
    };
  },

  toJSON(message: CreateArtistRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.bio !== "") {
      obj.bio = message.bio;
    }
    if (message.genres?.length) {
      obj.genres = message.genres;
    }
    if (message.availability !== false) {
      obj.availability = message.availability;
    }
    if (message.socialLinks?.length) {
      obj.socialLinks = message.socialLinks;
    }
    if (message.user !== "") {
      obj.user = message.user;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateArtistRequest>, I>>(base?: I): CreateArtistRequest {
    return CreateArtistRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateArtistRequest>, I>>(object: I): CreateArtistRequest {
    const message = createBaseCreateArtistRequest();
    message.name = object.name ?? "";
    message.bio = object.bio ?? "";
    message.genres = object.genres?.map((e) => e) || [];
    message.availability = object.availability ?? false;
    message.socialLinks = object.socialLinks?.map((e) => e) || [];
    message.user = object.user ?? "";
    return message;
  },
};

function createBaseArtistResponse(): ArtistResponse {
  return {
    id: "",
    name: "",
    bio: "",
    genres: [],
    availability: false,
    socialLinks: [],
    user: "",
    createdAt: "",
    updatedAt: "",
  };
}

export const ArtistResponse: MessageFns<ArtistResponse> = {
  encode(message: ArtistResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.bio !== "") {
      writer.uint32(26).string(message.bio);
    }
    for (const v of message.genres) {
      writer.uint32(34).string(v!);
    }
    if (message.availability !== false) {
      writer.uint32(40).bool(message.availability);
    }
    for (const v of message.socialLinks) {
      writer.uint32(50).string(v!);
    }
    if (message.user !== "") {
      writer.uint32(58).string(message.user);
    }
    if (message.createdAt !== "") {
      writer.uint32(66).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(74).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ArtistResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArtistResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.bio = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.genres.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.availability = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.socialLinks.push(reader.string());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.user = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ArtistResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      bio: isSet(object.bio) ? globalThis.String(object.bio) : "",
      genres: globalThis.Array.isArray(object?.genres) ? object.genres.map((e: any) => globalThis.String(e)) : [],
      availability: isSet(object.availability) ? globalThis.Boolean(object.availability) : false,
      socialLinks: globalThis.Array.isArray(object?.socialLinks)
        ? object.socialLinks.map((e: any) => globalThis.String(e))
        : [],
      user: isSet(object.user) ? globalThis.String(object.user) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
    };
  },

  toJSON(message: ArtistResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.bio !== "") {
      obj.bio = message.bio;
    }
    if (message.genres?.length) {
      obj.genres = message.genres;
    }
    if (message.availability !== false) {
      obj.availability = message.availability;
    }
    if (message.socialLinks?.length) {
      obj.socialLinks = message.socialLinks;
    }
    if (message.user !== "") {
      obj.user = message.user;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ArtistResponse>, I>>(base?: I): ArtistResponse {
    return ArtistResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ArtistResponse>, I>>(object: I): ArtistResponse {
    const message = createBaseArtistResponse();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.bio = object.bio ?? "";
    message.genres = object.genres?.map((e) => e) || [];
    message.availability = object.availability ?? false;
    message.socialLinks = object.socialLinks?.map((e) => e) || [];
    message.user = object.user ?? "";
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    return message;
  },
};

function createBaseArtistListResponse(): ArtistListResponse {
  return { artists: [] };
}

export const ArtistListResponse: MessageFns<ArtistListResponse> = {
  encode(message: ArtistListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.artists) {
      ArtistResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ArtistListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArtistListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.artists.push(ArtistResponse.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ArtistListResponse {
    return {
      artists: globalThis.Array.isArray(object?.artists)
        ? object.artists.map((e: any) => ArtistResponse.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ArtistListResponse): unknown {
    const obj: any = {};
    if (message.artists?.length) {
      obj.artists = message.artists.map((e) => ArtistResponse.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ArtistListResponse>, I>>(base?: I): ArtistListResponse {
    return ArtistListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ArtistListResponse>, I>>(object: I): ArtistListResponse {
    const message = createBaseArtistListResponse();
    message.artists = object.artists?.map((e) => ArtistResponse.fromPartial(e)) || [];
    return message;
  },
};

export interface ArtistService {
  GetArtistById(request: GetArtistByIdRequest): Promise<ArtistResponse>;
  UpdateArtist(request: UpdateArtistRequest): Promise<ArtistResponse>;
  DeleteArtist(request: DeleteArtistRequest): Promise<ArtistResponse>;
  CreateArtist(request: CreateArtistRequest): Promise<ArtistResponse>;
  GetAllArtists(request: Empty): Promise<ArtistListResponse>;
}

export const ArtistServiceServiceName = "artist.ArtistService";
export class ArtistServiceClientImpl implements ArtistService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ArtistServiceServiceName;
    this.rpc = rpc;
    this.GetArtistById = this.GetArtistById.bind(this);
    this.UpdateArtist = this.UpdateArtist.bind(this);
    this.DeleteArtist = this.DeleteArtist.bind(this);
    this.CreateArtist = this.CreateArtist.bind(this);
    this.GetAllArtists = this.GetAllArtists.bind(this);
  }
  GetArtistById(request: GetArtistByIdRequest): Promise<ArtistResponse> {
    const data = GetArtistByIdRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetArtistById", data);
    return promise.then((data) => ArtistResponse.decode(new BinaryReader(data)));
  }

  UpdateArtist(request: UpdateArtistRequest): Promise<ArtistResponse> {
    const data = UpdateArtistRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateArtist", data);
    return promise.then((data) => ArtistResponse.decode(new BinaryReader(data)));
  }

  DeleteArtist(request: DeleteArtistRequest): Promise<ArtistResponse> {
    const data = DeleteArtistRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteArtist", data);
    return promise.then((data) => ArtistResponse.decode(new BinaryReader(data)));
  }

  CreateArtist(request: CreateArtistRequest): Promise<ArtistResponse> {
    const data = CreateArtistRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateArtist", data);
    return promise.then((data) => ArtistResponse.decode(new BinaryReader(data)));
  }

  GetAllArtists(request: Empty): Promise<ArtistListResponse> {
    const data = Empty.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetAllArtists", data);
    return promise.then((data) => ArtistListResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

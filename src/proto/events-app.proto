syntax = "proto3";
package eventsms;

import "google/protobuf/empty.proto";

//------------------- MAIN APP SERVICE
service HealthCheck {
  rpc Check(HealthCheckRequest) returns (HealthCheckResponse);
}

message HealthCheckRequest {}

message HealthCheckResponse {
  bool healthy = 1;
}

message PaginationRequest {
  map<string, string> query = 1; // Key-value pairs for dynamic query filters
  int32 page = 2;               // The page number for pagination
  int32 limit = 3;              // The number of items per page
}

message PaginationMetadata {
  int32 currentPage = 1;        // Current page number
  int32 totalPages = 2;         // Total number of pages
  int32 totalItems = 3;         // Total number of items
  int32 itemsPerPage = 4;       // Number of items per page
}

//------------------- ARTISTS SERVICE
service ArtistService {
  rpc GetArtistById(GetArtistByIdRequest) returns (ArtistResponse);
  rpc UpdateArtist(UpdateArtistRequest) returns (ArtistResponse);
  rpc DeleteArtist(DeleteArtistRequest) returns (ArtistResponse);
  rpc CreateArtist(CreateArtistRequest) returns (ArtistResponse);
  rpc GetAllArtists(google.protobuf.Empty) returns (ArtistListResponse);
}

message GetArtistByIdRequest {
  string id = 1;
}

message UpdateArtistRequest {
  string id = 1;
  string name = 2;
  string bio = 3;
  repeated string genres = 4;
  bool availability = 5;
  repeated string socialLinks = 6;
  string user = 7;
}

message DeleteArtistRequest {
  string id = 1;
}

message CreateArtistRequest {
  string name = 1;
  string bio = 2;
  repeated string genres = 3;
  bool availability = 4;
  repeated string socialLinks = 5;
  string user = 6;
}

message ArtistResponse {
  string id = 1;
  string name = 2;
  string bio = 3;
  repeated string genres = 4;
  bool availability = 5;
  repeated string socialLinks = 6;
  string user = 7;
  string createdAt = 8;
  string updatedAt = 9;
}

message ArtistListResponse {
  repeated ArtistResponse artists = 1;
}

//------------------- CLUBS SERVICE
service ClubService {
  rpc CreateClub(CreateClubRequest) returns (ClubResponse);
  rpc GetClubById(GetClubByIdRequest) returns (ClubResponse);
  rpc UpdateClub(UpdateClubRequest) returns (ClubResponse);
  rpc DeleteClub(DeleteClubRequest) returns (ClubResponse);
  rpc GetAllClubs(google.protobuf.Empty) returns (ClubListResponse);
}

message CreateClubRequest {
  string name = 1;
  string location = 2;
  int32 capacity = 3;
  string description = 4;
  string googleMapsLink = 5;
}

message GetClubByIdRequest {
  string id = 1;
}

message UpdateClubRequest {
  string id = 1;
  string name = 2;
  string location = 3;
  int32 capacity = 4;
  string description = 5;
  string googleMapsLink = 6;
}

message DeleteClubRequest {
  string id = 1;
}

message ClubResponse {
  string id = 1;
  string name = 2;
  string location = 3;
  int32 capacity = 4;
  string description = 5;
  string googleMapsLink = 6;
  repeated string events = 7; // IDs of associated events
  string createdAt = 8;
  string updatedAt = 9;
}

message ClubListResponse {
  repeated ClubResponse clubs = 1;
}

//------------------- EVENT SERVICE
service EventService {
  rpc CreateEvent(CreateEventRequest) returns (EventResponse);
  rpc GetEventById(GetEventByIdRequest) returns (EventResponse);
  rpc UpdateEvent(UpdateEventRequest) returns (EventResponse);
  rpc DeleteEvent(DeleteEventRequest) returns (EventResponse);
  rpc GetAllEvents(google.protobuf.Empty) returns (EventListResponse);
  rpc FindAllEvents (PaginationRequest) returns (FindAllEventsResponse);

}

message CreateEventRequest {
  string name = 1;
  string location = 2;
  string dateStart = 3;
  string dateEnd = 4;
  repeated string artist = 5; 
  string organizer = 6;
  double ticketPrice = 7;
  string club = 8;

}

message GetEventByIdRequest {
  string id = 1;
}

message UpdateEventRequest {
  string id = 1;
  string name = 2;
  string location = 3;
  string dateStart = 4;
  string dateEnd = 5;
  repeated string artist = 6;
  double ticketPrice = 8;
  string club = 9;
}

message DeleteEventRequest {
  string id = 1;
}

message EventResponse {
  string id = 1;
  string name = 2;
  string location = 3;
  string dateStart = 4;
  string dateEnd = 5;
  repeated string artist = 6;
  string organizer = 7;
  double ticketPrice = 8;
  string createdAt = 9;
  string updatedAt = 10;
  string club = 11;
}

message EventListResponse {
  repeated EventResponse events = 1;
}

message FindAllEventsResponse {
  repeated EventResponse events = 1; // The list of events
  PaginationMetadata pagination = 2; // Metadata for pagination
}

//------------------- BOOKING SERVICE
service BookingService {
  rpc CreateBooking(CreateBookingRequest) returns (BookingResponse);
  rpc GetBookingById(GetBookingByIdRequest) returns (BookingResponse);
  rpc UpdateBooking(UpdateBookingRequest) returns (BookingResponse);
  rpc DeleteBooking(DeleteBookingRequest) returns (BookingResponse);
  rpc GetAllBookings(google.protobuf.Empty) returns (BookingListResponse);
  rpc findArtistBookingsByTimeRange(findArtistBookingsByTimeRangeRequest) returns (BookingListResponse);
}

message CreateBookingRequest {
  string event = 1; // Event ID
  string artist = 2; // Artist ID
  string client = 3; // Client ID
  string startTime = 4; // Start time for booking
  string endTime = 5; // End time for booking
  string status = 6;
  string bookingDate = 7;
}

message findArtistBookingsByTimeRangeRequest {
  string artist = 1;
  string startTime = 2;
  string endTime = 3;
  string bookingDate = 4;
}

message GetBookingByIdRequest {
  string id = 1;
}

message UpdateBookingRequest {
  string id = 1;
  string event = 2;
  string artist = 3;
  string client = 4;
  string startTime = 5;
  string endTime = 6;
  string status = 7;
  string bookingDate = 8;
}

message DeleteBookingRequest {
  string id = 1;
}

message BookingResponse {
  string id = 1;
  string event = 2;
  string artist = 3;
  string client = 4;
  string startTime = 5;
  string endTime = 6;
  string status = 7;
  string createdAt = 8;
  string updatedAt = 9;
  string bookingDate = 10;
}

message BookingListResponse {
  repeated BookingResponse bookings = 1;
}

//------------------- ORGANIZER SERVICE
service OrganizerService {
  rpc CreateOrganizer(CreateOrganizerRequest) returns (OrganizerResponse);
  rpc GetOrganizerById(GetOrganizerByIdRequest) returns (OrganizerResponse);
  rpc UpdateOrganizer(UpdateOrganizerRequest) returns (OrganizerResponse);
  rpc DeleteOrganizer(DeleteOrganizerRequest) returns (google.protobuf.Empty);
  rpc GetAllOrganizers(google.protobuf.Empty) returns (OrganizerListResponse);
  rpc PaginateOrganizers (PaginationRequest) returns (PaginateOrganierResponse);
}

message CreateOrganizerRequest {
  string userId = 1;            // Unique identifier of the user
  string contactEmail = 2;       // Organizer-specific email contact
  string contactPhone = 3;       // Organizer-specific phone contact
  string description = 4;        // Optional description for the organizer
}

message GetOrganizerByIdRequest {
  string id = 1;
}

message UpdateOrganizerRequest {
  string id = 1;
  string contactEmail = 2;
  string contactPhone = 3;
  string description = 4;
}

message DeleteOrganizerRequest {
  string id = 1;
}

message OrganizerResponse {
  string id = 1;
  string userId = 2;
  string contactEmail = 3;
  string contactPhone = 4;
  string description = 5;
}

message OrganizerListResponse {
  repeated OrganizerResponse organizers = 1;
}

message PaginateOrganierResponse {
  repeated OrganizerResponse organizers = 1; // The list of events
  PaginationMetadata pagination = 2; // Metadata for pagination
}